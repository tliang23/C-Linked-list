#include <iostream>
using namespace std;

class Node {
public:
    int Value;
    Node* Next;
};
void printList(Node* n) {
    while (n != NULL) {
        cout << n->Value << endl;
        n = n->Next;
    }
}
void InsertAtTheFront(Node** head, int newvalue) {
    //create a new node
    Node* newnode = new Node();
    newnode->Value = newvalue;
    //Put the new node at the head of the list
    newnode->Next = *head;
    //Move the head of the list to point to the newnode
    *head = newnode;
}
void InsertAtTheEnd(Node** head, int newvalue) {
    //create a newnode
    Node* newnode = new Node();
    newnode->Value = newvalue;
    newnode->Next = NULL;
    //Check if it is an empty list
    if(*head == NULL) {
        *head = newnode;
    }  
    //Find the last node
    Node* Last = *head;
    while(Last->Next != NULL) {
        Last = Last->Next;
    }
    //Insert newnode after the last node
    Last->Next = newnode;
   
}
void InsertAtTheMiddle(Node* previous, int newvalue) {
    //check if previous node is NULL
    if(previous == NULL) {
        cout << "Previous node is a NULL";
        return;
    }
    //create a newnode
    Node* newnode = new Node();
    newnode->Value = newvalue;
    //connect the newnode with the later node at first and then the previous node
    newnode->Next = previous->Next;
    previous->Next = newnode;
}
int main()
{
    Node* head = new Node();
    Node* second = new Node();
    Node* third = new Node();

    head->Value = 1;
    head->Next = second;
    second->Value = 2;
    second->Next = third;
    third->Value = 3;
    third->Next = NULL;

    InsertAtTheFront(&head, -1);
    InsertAtTheEnd(&head, 4);
    InsertAtTheMiddle(second, -2);
    printList(head);

    system("pause>0");
}
